Purpose and Usage of localStorage and sessionStorage APIs
Both localStorage and sessionStorage are part of the Web Storage API, which provides mechanisms to store key-value pairs in a web browser. These APIs are used to store data on the client side, enabling web applications to save and retrieve data directly in the user's browser without relying on server-side storage.

1. localStorage API
Purpose:

localStorage is designed to store data persistently across browser sessions. The data saved in localStorage does not expire when the browser is closed or the user navigates away from the site. This makes it ideal for saving data that should persist over time, such as user preferences, theme settings, or data that doesn't change frequently.
Usage:

Developers use localStorage to store information that needs to be available even after the user closes and reopens their browser. It's often used for saving settings, preferences, or cached data that can be reused on subsequent visits.
Example:
// Storing data in localStorage
localStorage.setItem('theme', 'dark');

// Retrieving data from localStorage
const theme = localStorage.getItem('theme');
console.log(theme); // Output: 'dark'

// Removing an item from localStorage
localStorage.removeItem('theme');

// Clearing all items in localStorage
localStorage.clear();

Use Case:

Theme Settings: If your application allows users to toggle between dark and light themes, you can save their preference in localStorage. When the user returns to your site later, you can retrieve their preferred theme and apply it automatically.

 sessionStorage API
Purpose:

sessionStorage is designed to store data for the duration of a page session. The data stored in sessionStorage is only available while the browser tab or window is open. Once the tab or window is closed, the data is cleared. This makes it suitable for storing temporary data that is only relevant during a specific browsing session, such as form data, or shopping cart contents that should not persist after the session ends.
Usage:

Developers use sessionStorage to store data that should be discarded after the user closes the browser tab or window. It's useful for session-specific data, where persistence beyond the current session is not required.
Example:
// Storing data in sessionStorage
sessionStorage.setItem('sessionData', 'some temporary data');

// Retrieving data from sessionStorage
const data = sessionStorage.getItem('sessionData');
console.log(data); // Output: 'some temporary data'

// Removing an item from sessionStorage
sessionStorage.removeItem('sessionData');

// Clearing all items in sessionStorage
sessionStorage.clear();

Use Case:

Form Data: If your application has a multi-step form, you can use sessionStorage to save the user's progress between steps. If the user navigates away and returns within the same session, their data is still available, but it will be cleared once the session ends.